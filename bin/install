#!/usr/bin/env node

/**
 * Module dependencies.
 */

require('dotenv').config();
const http = require('http');
const app = require('../index');
const mongooseConfig = require('../config/db.config');

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    // eslint-disable-next-line no-restricted-globals
    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    console.log('Listening on %s', bind);
}


/**
 * Listen on provided port, on all network interfaces.
 */

server
    .listen(app.get('port'), function () {
        console.log('Application started on port %d', app.get('port'));
    })
    .on('error', onError)
    .on('listening', onListening);


mongooseConfig
    .doConnect()
    .then(() => {
        console.log('Mongoose connection success')
    })
    .catch((err) => console.log({ err }, 'Mongoose connection error'));